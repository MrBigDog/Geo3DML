IF   (DYNAMIC_GWEARTH)
    ADD_DEFINITIONS(-DSAXREADER_LIBRARY)
ELSE (DYNAMIC_GWEARTH)
    ADD_DEFINITIONS(-DSAXREADER_LIBRARY_STATIC)
ENDIF(DYNAMIC_GWEARTH)

IF(WIN32)
    IF(MSVC)
        SET(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} /NODEFAULTLIB:MSVCRT")
    ENDIF(MSVC)
	LIST(APPEND TARGET_EXTERNAL_LIBRARIES psapi)
ENDIF(WIN32)

SET(LIB_NAME "SaxReader")

SET(HEADER_PATH ${PROJECT_SOURCE_DIR}/include/${LIB_NAME})
#INCLUDE_DIRECTORIES(AFTER ${OSG_INCLUDE_DIR})
#INCLUDE_DIRECTORIES(AFTER ${OSGEARTH_INCLUDE_DIR})

SET(LIB_PUBLIC_HEADERS
	Export.h
	FeatureRelationReader.h
	FieldReader.h
	Geo3DLayerReader.h
	Geo3DMapReader.h
	Geo3DProjectReader.h
	Geo3DStyleReader.h
	GeoFeatureReader.h
	GeologicFeatureClassReader.h
	GeoModelReader.h
	global.h
	gmmlDisplayErrorandWarning.h
	gmmlSystem.h
	gmmlSystemInfo.h
	MyTimer.h
	ShapePropertyReader.h
	ShapeReader.h
	#stdafx.h
	targetver.h
	XMLBase64.h
)

SET(TARGET_SRC
	FeatureRelationReader.cpp
	FieldReader.cpp
	Geo3DLayerReader.cpp
	Geo3DMapReader.cpp
	Geo3DProjectReader.cpp
	Geo3DStyleReader.cpp
	GeoFeatureReader.cpp
	GeologicFeatureClassReader.cpp
	GeoModelReader.cpp
	global.cpp
	gmmlDisplayErrorandWarning.cpp
	gmmlSystemInfo.cpp
	SaxReader.cpp
	ShapePropertyReader.cpp
	ShapeReader.cpp
	#stdafx.cpp
	xmlBase64.cpp
)

ADD_LIBRARY(
    ${LIB_NAME} ${GWEARTH_USER_DEFINED_DYNAMIC_OR_STATIC}
    ${LIB_PUBLIC_HEADERS}
    ${TARGET_SRC} )
	
INCLUDE_DIRECTORIES(
	${GWEARTH_SOURCE_DIR}/Src 
	${GWEARTH_SOURCE_DIR}/Src/SaxReader
	${GWEARTH_SOURCE_DIR}/Src/vtklibxml2
	${GWEARTH_SOURCE_DIR}/Src/GM_XML
	${GWEARTH_SOURCE_DIR}/Src/vtkExtending
	${ICONV_INCLUDE_DIR}
	)

#IF (WIN32)
#  LINK_EXTERNAL(${LIB_NAME} ${TARGET_EXTERNAL_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${MATH_LIBRARY})
#ELSE(WIN32)
#  LINK_EXTERNAL(${LIB_NAME} ${TARGET_EXTERNAL_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${MATH_LIBRARY})
#ENDIF(WIN32)

#OPTION(NRL_STATIC_LIBRARIES "Link osgEarth against static GDAL and cURL, including static OpenSSL, Proj4, JPEG, PNG, and TIFF." OFF)
#if(NOT NRL_STATIC_LIBRARIES)
#  LINK_WITH_VARIABLES(${LIB_NAME} OSG_LIBRARY ZLIB_LIBRARIES)
#else(NOT NRL_STATIC_LIBRARIES)
#  LINK_WITH_VARIABLES(${LIB_NAME} OSG_LIBRARY OSGUTIL_LIBRARY OSGSIM_LIBRARY OSGTERRAIN_LIBRARY OSGDB_LIBRARY OSGFX_LIBRARY OSGVIEWER_LIBRARY OSGTEXT_LIBRARY OSGGA_LIBRARY OSGSHADOW_LIBRARY #OPENTHREADS_LIBRARY CURL_LIBRARY GDAL_LIBRARY ZLIB_LIBRARIES OSGMANIPULATOR_LIBRARY SSL_EAY_RELEASE LIB_EAY_RELEASE TIFF_LIBRARY PROJ4_LIBRARY PNG_LIBRARY JPEG_LIBRARY)
#endif(NOT NRL_STATIC_LIBRARIES)

LINK_WITH_VARIABLES(${LIB_NAME} ICONV_LIBRARIES )


LINK_INTERNAL(${LIB_NAME} 
	vtklibxml2
	vtkExtending
	#GMLFeature
	GM_XML
	)
 
LINK_INTERNAL(${LIB_NAME} msvcprtd.lib)


INCLUDE(ModuleInstall OPTIONAL)